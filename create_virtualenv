#!/bin/bash
set -ex

usage() {
    set +x
    script=`basename $0`
    user=`whoami`

    cat <<END
Usage:
    $script -p /var/lib/virtualenv_root_dir [-r requirements.txt] [-i requerements_implant.txt]

devpi example:
    $script -p ... -r ... -D http://localhost:3141 -R $user/prod -U $user [-P pass]

Available options:
    -p <directory> path to virtualenv root *required*
    -r <requirements.txt> path to file with dependencies
    -i <requirements-implant.txt> path to file with dependencies (to be installed by symlinking from system libraries)
    -f force creating new virtualenv (even if is already exists)
    -w <wheels_dir> path to directory with wheels files
    -l <symlink_file> create symlink to python interpreter
    -C <pip_cache_dir> pip cache directory (passed to pip as --download-cache)
    -h print this help

Devpi options:
    -D <devpi_url> devpi URL (ex.: http://localhost:3134/)
    -R <devpi_repo> devpi repository name (ex.: $user/dev)
    -U <devpi_user> devpi login name (ex.: $user)
    -P <devpi_password> devpi password

P.S. long option names were sacrificed to Mac OS compatibility. Sorry about that.
END
    exit 1
}

ARGS=`getopt r:i:p:w:fl:C: $*`
if [[ $? != 0 ]]; then
    usage
fi

eval set -- "$ARGS"

# Options
reqs_file=''
implant_file=''
ve_root=''
wheels_dir=''
devpi=''
devpi_repo=''
devpi_user=''
devpi_password=''
pip_download_cache=''
interpreter_link=''
force=''
###

# Path to implant_module script.
# We look for it in the same directory as create_virtualenv, 
# so we can find it if they both were installed by debian package,
# or checked out as git submodule
implant_module_bin="$(dirname "$0")/implant_module"

while true; do
    case "$1" in
        -r ) reqs_file=$2; shift 2 ;;
        -i ) implant_file=$2; shift 2 ;;
        -p ) ve_root=$2; shift 2 ;;
        -w ) wheels_dir=$2; shift 2 ;;
        -f ) force=1; shift ;;
        -l ) interpreter_link=$2; shift 2 ;;
        -D ) devpi=$2; shift 2 ;;
        -R ) devpi_repo=$2; shift 2 ;;
        -U ) devpi_user=$2; shift 2 ;;
        -P ) devpi_password=$2; shift 2 ;;
        -C ) pip_download_cache=$2; shift 2 ;;
        -h ) usage ;;
        -- ) shift; break ;;
        * ) break ;;
    esac
done

if [[ -z $reqs_file || -z $ve_root ]]; then
    usage
fi

if [[ $devpi ]]; then
    if [[ -z $devpi_repo || -z $devpi_user ]]; then
        echo "--devpi-repo and devpi-user options required"
        exit 1
    fi
fi

if [[ $devpi && $wheels_dir ]]; then
    echo "devpi and wheels? no"
    exit 1
fi


# Calculate digest
if [[ `uname` == "Darwin" ]]; then
    md5_prog='md5'
else
    md5_prog='md5sum'
fi
md5=`cat $reqs_file | $md5_prog`

if [[ $wheels_dir ]]; then
    # Add both wheel names and content
    md5=`(echo "$md5"; find $wheels_dir -type f | sort) | $md5_prog`
    md5=`(echo "$md5"; find $wheels_dir -type f | sort | xargs cat) | $md5_prog`
fi

if [[ $implant_file ]]; then
    md5=`(echo "$md5"; cat $implant_file) | $md5_prog`
fi

md5=`echo "$md5" | cut -f1 -d' '`


ve_dir="$ve_root/$md5";
ve_current="$ve_root/current"

if [[ $pip_download_cache ]]; then
    pip_cache_option=" --download-cache=$pip_download_cache"
else
    pip_cache_option=''
fi

if [[ -d $ve_dir && -f $ve_dir/finished ]]; then
    if [[ $force ]]; then
        echo "Removing $ve_dir due to --force option"
        rm -rf "$ve_dir"
    else
        echo "Virtualenv is OK";
        link=`readlink $ve_current || :`
        if [[ ! -e $ve_current || $link != $ve_dir ]]; then
            echo "'current' symlink is broken, going to recreate it"
            echo "now it points to '$link'"
            echo "should be: '$ve_dir'"
            rm -f "$ve_current"
            ln -s $ve_dir $ve_current 
            echo "OK!"
        fi
    fi
elif [[ -d $ve_dir ]]; then
    echo "Found unfinished virtualenv, going to remove it"
    rm -rf "$ve_dir"
fi


if [[ ! -d $ve_dir ]]; then
    echo "Creating new virtualenv (ver. $md5)"
    mkdir -p $ve_dir
    python -m virtualenv $ve_dir
    source $ve_dir/bin/activate
    pip install $pip_cache_option -U setuptools
    pip install $pip_cache_option -U pip
    pip install $pip_cache_option -U distribute

    if [[ $implant_file ]]; then
        echo "Implanting requirements from $implant_file"
        while read package; do
            $implant_module_bin $package
        done < $implant_file
    fi

    devpi_settings=''
    if [[ $devpi ]]; then
        echo "Install and setup devpi"
        pip install $pip_cache_option -U devpi-client==2.0.2 devpi-common==2.0.2 devpi-server==2.0.6

        devpi use $devpi
        devpi login $devpi_user --password "$devpi_password"
        devpi_settings="-i $devpi/$devpi_repo"
    fi

    echo "Installing requirements from file $reqs_file"
    if [[ $wheels_dir ]]; then
        pip install --no-index --find-links=$wheels_dir -r $reqs_file
    else
        pip install $devpi_settings -r $reqs_file
    fi

    echo "Finishing up"
    rm -f "$ve_current"
    ln -s $ve_dir $ve_current
    touch $ve_dir/finished
fi

if [[ $interpreter_link ]]; then
    link_target="$ve_current/bin/python"
    if [[ ! -L $interpreter_link || `readlink $interpreter_link` != $link_target ]]; then
        echo "Linking $interpreter_link to $link_target"
        ln -sf $link_target $interpreter_link
    else
        echo "Interpreter link is OK ($interpreter_link -> $link_target)"
    fi
fi
